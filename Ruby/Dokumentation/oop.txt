OOP

Klassen 
	Bilden den Plan von konkreten Objekten. 
	Definition:
		class Player

		end
		Eine Klasse wird durch die Verwendung des Schlüsselwortes "class" definiert. 
		Die Definition ist immer in einem Block eingeschlossen. 

Objekt:
	Wenn ich mit einer Klasse arbeiten will, dann erzeuge ich ein Objekt, das in einer Variable 
	gespeichert wird. 
		obj = player.new 
	Ein neues Objekt wird in einer Variablen mit beliebiger Bezeichnung gespeichert. 
	Es wird mit dem Namen der Klasse und dem Aufruf der Mehtode "new" erzeugt. 
	Das Objekt hat alle Eingeschaften (Attribute) und Fähigkeiten (Methoden), die in der Klasse 
	definiert sind.   

Konstruktur: 
	Beim erzeugen eines neuen Objektes mit "player.new" wird automatisch eine Methode "initialize" 
	diese Methode gibt es in Jeder Ruby Klasse. 
	Es ist üblich diese existierende Methode mit einer eigenen Methode zu überschreiben, um dort die 
	Basiswerte des Objektes festzulegen. 

	def initialize(name, health = 100)
		@name = name
		@health = health
	end


Instanzvariablen / Eigenschaften: 
	In der OOP hat ein Objekt bestimmte Eigenschaften die es charakterisieren. In Ruby werden diese 
	Eigenschaften als Instanzvariablen definiert und ein '@' wird dem Namen vorangestellt. 
	Bsp: @name
	Das Besondere einer Instanzvariable oder Eigenschaft ist, dass sie in der ganzen Klasse gilt und 
	verwerter werden kann. 
	Wichtig: Variablen die innerhalb von einem Block definiert werden und keinen @ vorangestellt 
	haben, sind sog. lokale Variablen und gelten nur innerhalb des Blockes in dem sie definiert sind.
	Eine InstanzvARIABLE WIRD ZU INER eIGENSCHAFT, INDEM ES IN DER kLASSE METHODEN GIBT DIE DEN ZUGRIFF VON aUẞERHALB (aUFRUF DURCH DAS oBJEKT) ERMÖGLICHEN Eine Eigenschaft hat einen soge. Setter, der es ermöglicht einen Wert zu setzen und einen Getter der einen Wert zurückgibt.

	Getter:
		def name
			@name
		end
		Die Methode heißt genauso wie die Instanzvariable, nur ohne das @. Sie hat die Aufgabe den Wert der Instanzvarialbe Name zurück zu geben. 
		Aufruf: 
			puts obj.name
			gibt den Namen des Players aus
		Kurzform:
			Anstelle einer Methodendefinition kann ich eine kurzform verwenden:
				attr_reader :name
	Setter:
		def name = (name)
			@name = name
		end
		Der Setter zum speichern eines Wertes in einer Instanzvariable heißt wie die Instanzvariable mit einem = im Namen. 
		Aufruf:
			obj.name = "Supergirl"
		Kurzform:
			attr_writer :name

	Virtuelles Attribut:
		Ein virtuelles Attribut ist eine methode, die so aussieht, bzw. genutzt werden kann wie eine Eigenschaft, die allerdings keine Instnazvariablen hat. Also keine echte eigenschft ist, obwohl sie von aussen so aussieht.
		def normalized_health
			@health * 1000
		end
		Aufruf:
			puts obj.normalized_health
